{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _ButtonUnstyled = require(\"../ButtonUnstyled\");\n\nvar _ListboxUnstyled = require(\"../ListboxUnstyled\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction useSelect(props) {\n  var buttonComponent = props.buttonComponent,\n      buttonRefProp = props.buttonRef,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      listboxId = props.listboxId,\n      listboxRefProp = props.listboxRef,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _onChange = props.onChange,\n      onOpenChange = props.onOpenChange,\n      _props$open = props.open,\n      open = _props$open === void 0 ? false : _props$open,\n      options = props.options,\n      valueProp = props.value;\n  var buttonRef = React.useRef(null);\n  var handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);\n  var listboxRef = React.useRef(null);\n  var intermediaryListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef);\n\n  var _ref = (0, _utils.unstable_useControlled)({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'SelectUnstyled',\n    state: 'value'\n  }),\n      _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[0],\n      setValue = _ref2[1]; // prevents closing the listbox on keyUp right after opening it\n\n\n  var ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  var ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      listboxFocusRequested = _React$useState2[0],\n      requestListboxFocus = _React$useState2[1];\n\n  var focusListboxIfRequested = React.useCallback(function () {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n\n  var updateListboxRef = function updateListboxRef(listboxElement) {\n    listboxRef.current = listboxElement;\n    focusListboxIfRequested();\n  };\n\n  var handleListboxRef = (0, _utils.unstable_useForkRef)(intermediaryListboxRef, updateListboxRef);\n  React.useEffect(function () {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(function () {\n    requestListboxFocus(open);\n  }, [open]);\n\n  var createHandleMouseDown = function createHandleMouseDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onMous;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n      if (!event.defaultPrevented && open) {\n        ignoreClick.current = true;\n      }\n    };\n  };\n\n  var createHandleButtonClick = function createHandleButtonClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n      if (!event.defaultPrevented && !ignoreClick.current) {\n        onOpenChange == null ? void 0 : onOpenChange(!open);\n      }\n\n      ignoreClick.current = false;\n    };\n  };\n\n  var createHandleButtonKeyDown = function createHandleButtonKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (event.key === 'Enter') {\n        ignoreEnterKeyUp.current = true;\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        onOpenChange == null ? void 0 : onOpenChange(true);\n      }\n    };\n  };\n\n  var createHandleListboxKeyUp = function createHandleListboxKeyUp(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyU;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      var closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n      if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n        var _buttonRef$current;\n\n        buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n\n      ignoreEnterKeyUp.current = false;\n    };\n  };\n\n  var createHandleListboxItemClick = function createHandleListboxItemClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic2;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (!multiple) {\n        onOpenChange == null ? void 0 : onOpenChange(false);\n      }\n    };\n  };\n\n  var createHandleListboxBlur = function createHandleListboxBlur(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$blur;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$blur = otherHandlers.blur) == null ? void 0 : _otherHandlers$blur.call(otherHandlers, event);\n\n      if (!event.defaultPrevented) {\n        onOpenChange == null ? void 0 : onOpenChange(false);\n      }\n    };\n  };\n\n  var listboxReducer = function listboxReducer(state, action) {\n    var newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action); // change selection when listbox is closed\n\n    if (action.type === _ListboxUnstyled.ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {\n      var optionToSelect = action.props.options[newState.highlightedIndex];\n      return (0, _extends2.default)({}, newState, {\n        selectedValue: optionToSelect\n      });\n    }\n\n    if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.setControlledValue || action.type === _ListboxUnstyled.ActionTypes.optionsChange) {\n      var selectedOptionIndex = action.props.options.findIndex(function (o) {\n        return action.props.optionComparer(o, newState.selectedValue);\n      });\n      return (0, _extends2.default)({}, newState, {\n        highlightedIndex: selectedOptionIndex\n      });\n    }\n\n    return newState;\n  };\n\n  var _ref3 = (0, _ButtonUnstyled.useButton)({\n    component: buttonComponent,\n    disabled: disabled,\n    ref: handleButtonRef\n  }),\n      getButtonRootProps = _ref3.getRootProps,\n      buttonActive = _ref3.active,\n      buttonFocusVisible = _ref3.focusVisible;\n\n  var selectedOption = React.useMemo(function () {\n    var _props$options$find;\n\n    return props.multiple ? props.options.filter(function (o) {\n      return value.includes(o.value);\n    }) : (_props$options$find = props.options.find(function (o) {\n      return o.value === value;\n    })) != null ? _props$options$find : null;\n  }, [props.multiple, props.options, value]);\n  var useListboxParameters;\n\n  if (props.multiple) {\n    useListboxParameters = {\n      id: listboxId,\n      isOptionDisabled: function isOptionDisabled(o) {\n        var _o$disabled;\n\n        return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;\n      },\n      optionComparer: function optionComparer(o, v) {\n        return (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value);\n      },\n      listboxRef: handleListboxRef,\n      multiple: true,\n      onChange: function onChange(newOptions) {\n        setValue(newOptions.map(function (o) {\n          return o.value;\n        }));\n        _onChange == null ? void 0 : _onChange(newOptions.map(function (o) {\n          return o.value;\n        }));\n      },\n      options: options,\n      value: selectedOption\n    };\n  } else {\n    useListboxParameters = {\n      id: listboxId,\n      isOptionDisabled: function isOptionDisabled(o) {\n        var _o$disabled2;\n\n        return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;\n      },\n      optionComparer: function optionComparer(o, v) {\n        return (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value);\n      },\n      listboxRef: handleListboxRef,\n      multiple: false,\n      onChange: function onChange(option) {\n        var _option$value, _option$value2;\n\n        setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);\n        _onChange == null ? void 0 : _onChange((_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);\n      },\n      options: options,\n      stateReducer: listboxReducer,\n      value: selectedOption\n    };\n  }\n\n  var _ref4 = (0, _ListboxUnstyled.useListbox)(useListboxParameters),\n      getListboxRootProps = _ref4.getRootProps,\n      getListboxOptionProps = _ref4.getOptionProps,\n      getOptionState = _ref4.getOptionState,\n      highlightedOption = _ref4.highlightedOption;\n\n  var getButtonProps = function getButtonProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return (0, _extends2.default)({}, getButtonRootProps((0, _extends2.default)({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox'\n    });\n  };\n\n  var getListboxProps = function getListboxProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getListboxRootProps((0, _extends2.default)({}, otherHandlers, {\n      onBlur: createHandleListboxBlur(otherHandlers),\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    }));\n  };\n\n  var getOptionProps = function getOptionProps(option) {\n    var otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getListboxOptionProps(option, (0, _extends2.default)({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  };\n\n  React.useDebugValue({\n    value: value,\n    open: open,\n    highlightedOption: highlightedOption\n  });\n  return {\n    buttonActive: buttonActive,\n    buttonFocusVisible: buttonFocusVisible,\n    disabled: disabled,\n    getButtonProps: getButtonProps,\n    getListboxProps: getListboxProps,\n    getOptionProps: getOptionProps,\n    getOptionState: getOptionState,\n    open: open,\n    value: value\n  };\n}\n\nvar _default = useSelect;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}