{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useControllableReducer;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _useListbox = require(\"./useListbox.types\");\n\nvar _areArraysEqual = _interopRequireDefault(require(\"../utils/areArraysEqual\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  var valueRef = React.useRef(value);\n  valueRef.current = value;\n  var onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  var onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(function () {\n    if (Array.isArray(state.selectedValue)) {\n      if ((0, _areArraysEqual.default)(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur; // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n\n\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(function () {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\n\nfunction useControllableReducer(internalReducer, externalReducer, props) {\n  var controlledValue = props.value,\n      defaultValue = props.defaultValue,\n      onValueChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      options = props.options,\n      optionComparer = props.optionComparer;\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n\n  var _ref = (0, _utils.unstable_useControlled)({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  }),\n      _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[0],\n      setValueState = _ref2[1];\n\n  var previousValueRef = React.useRef(null);\n\n  var _React$useReducer = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(function () {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && (0, _areArraysEqual.default)(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: _useListbox.ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":null,"metadata":{},"sourceType":"script"}