{"ast":null,"code":"import _asyncToGenerator from\"/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/node_modules/@babel/runtime/regenerator/index.js\";// import axios from 'axios'\nimport axios from'axios';import React,{useEffect,useState}from'react';import Genres from'../../components/Genres';import CustomPagination from'../../components/Pagination/CustomPagination';import SingleContent from'../../components/SingleContent/SingleContent';import useGenres from'../../Hooks/useGenre';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TV_Series=function TV_Series(){var _useState=useState(1),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),content=_useState4[0],setContent=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),numOfPages=_useState6[0],setNumOfPages=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),seletedGenres=_useState8[0],setSeletedGenres=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),genres=_useState10[0],setGenres=_useState10[1];var genreforURL=useGenres(seletedGenres);var fetchTVSeries=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"https://api.themoviedb.org/3/discover/tv?api_key=\".concat(process.env.REACT_APP_API_KEY,\"&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=\").concat(page,\"&with_watch_monetization_types=flatrate&with&with_genres=\").concat(genreforURL));case 2:_yield$axios$get=_context.sent;data=_yield$axios$get.data;setContent(data.results);setNumOfPages(data.total_pages);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchTVSeries(){return _ref.apply(this,arguments);};}();useEffect(function(){fetchTVSeries();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[page,genreforURL]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"pageTitle\",children:\"TV Series\"}),/*#__PURE__*/_jsx(\"span\",{className:\"filterText\",style:{padding:5},children:\"Filter by genre\"}),/*#__PURE__*/_jsx(Genres,{type:\"tv\",selectedGenres:seletedGenres,setSelectedGenres:setSeletedGenres,genres:genres,setGenres:setGenres,setPage:setPage}),/*#__PURE__*/_jsx(\"div\",{className:\"trending\",children:content&&content.map(function(c){return/*#__PURE__*/_jsx(SingleContent,{id:c.id,poster:c.poster_path,title:c.title||c.name,date:c.first_air_date||c.release_date,media_type:\"tv\",vote_average:c.vote_average},c.id);})}),numOfPages>1&&/*#__PURE__*/_jsx(CustomPagination,{setPage:setPage,numOfPages:numOfPages})]});};export default TV_Series;","map":{"version":3,"sources":["/Users/chrisvazquez/Documents/GitHub/Entertainment-Center/src/Pages/TV_Series/TV_Series.js"],"names":["axios","React","useEffect","useState","Genres","CustomPagination","SingleContent","useGenres","TV_Series","page","setPage","content","setContent","numOfPages","setNumOfPages","seletedGenres","setSeletedGenres","genres","setGenres","genreforURL","fetchTVSeries","get","process","env","REACT_APP_API_KEY","data","results","total_pages","padding","map","c","id","poster_path","title","name","first_air_date","release_date","vote_average"],"mappings":"gbAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8CAA7B,CACA,MAAOC,CAAAA,aAAP,KAA0B,8CAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,sBAAtB,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,cAAwBL,QAAQ,CAAC,CAAD,CAAhC,wCAAOM,IAAP,eAAaC,OAAb,eACA,eAA8BP,QAAQ,CAAC,EAAD,CAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eACA,eAAoCT,QAAQ,EAA5C,yCAAOU,UAAP,eAAmBC,aAAnB,eACA,eAA0CX,QAAQ,CAAC,EAAD,CAAlD,yCAAOY,aAAP,eAAsBC,gBAAtB,eACA,eAA4Bb,QAAQ,CAAC,EAAD,CAApC,0CAAOc,MAAP,gBAAeC,SAAf,gBACA,GAAMC,CAAAA,WAAW,CAAGZ,SAAS,CAACQ,aAAD,CAA7B,CAEA,GAAMK,CAAAA,aAAa,0FAAC,mLACMpB,CAAAA,KAAK,CAACqB,GAAN,4DAC+BC,OAAO,CAACC,GAAR,CAAYC,iBAD3C,iGACoJf,IADpJ,qEACoNU,WADpN,EADN,uCACTM,IADS,kBACTA,IADS,CAKhBb,UAAU,CAACa,IAAI,CAACC,OAAN,CAAV,CACAZ,aAAa,CAACW,IAAI,CAACE,WAAN,CAAb,CANgB,sDAAD,kBAAbP,CAAAA,aAAa,0CAAnB,CASFlB,SAAS,CAAC,UAAM,CACdkB,aAAa,GACb;AACD,CAHQ,CAGN,CAACX,IAAD,CAAOU,WAAP,CAHM,CAAT,CAKE,mBACE,oCACI,aAAM,SAAS,CAAC,WAAhB,uBADJ,cAEI,aAAM,SAAS,CAAC,YAAhB,CAA6B,KAAK,CAAE,CAACS,OAAO,CAAE,CAAV,CAApC,6BAFJ,cAGI,KAAC,MAAD,EACE,IAAI,CAAC,IADP,CAEE,cAAc,CAAEb,aAFlB,CAGE,iBAAiB,CAAEC,gBAHrB,CAIE,MAAM,CAAEC,MAJV,CAKE,SAAS,CAAEC,SALb,CAME,OAAO,CAAER,OANX,EAHJ,cAWI,YAAK,SAAS,CAAC,UAAf,UACIC,OAAO,EAAIA,OAAO,CAACkB,GAAR,CAAY,SAACC,CAAD,qBACvB,KAAC,aAAD,EAEE,EAAE,CAAEA,CAAC,CAACC,EAFR,CAGE,MAAM,CAAED,CAAC,CAACE,WAHZ,CAIE,KAAK,CAAEF,CAAC,CAACG,KAAF,EAAWH,CAAC,CAACI,IAJtB,CAKE,IAAI,CAAEJ,CAAC,CAACK,cAAF,EAAoBL,CAAC,CAACM,YAL9B,CAME,UAAU,CAAC,IANb,CAOE,YAAY,CAAEN,CAAC,CAACO,YAPlB,EACOP,CAAC,CAACC,EADT,CADuB,EAAZ,CADf,EAXJ,CAwBKlB,UAAU,CAAG,CAAb,eACC,KAAC,gBAAD,EAAkB,OAAO,CAAEH,OAA3B,CAAoC,UAAU,CAAEG,UAAhD,EAzBN,GADF,CA8BD,CApDD,CAsDA,cAAeL,CAAAA,SAAf","sourcesContent":["// import axios from 'axios'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport Genres from '../../components/Genres'\nimport CustomPagination from '../../components/Pagination/CustomPagination'\nimport SingleContent from '../../components/SingleContent/SingleContent'\nimport useGenres from '../../Hooks/useGenre'\n\nconst TV_Series = () => {\n  const [page, setPage] = useState(1)\n  const [content, setContent] = useState([])\n  const [numOfPages, setNumOfPages] = useState()\n  const [seletedGenres, setSeletedGenres] = useState([])\n  const [genres, setGenres] = useState([])\n  const genreforURL = useGenres(seletedGenres)\n\n  const fetchTVSeries=async () => {\n     const { data } = await axios.get(\n       `https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_watch_monetization_types=flatrate&with&with_genres=${genreforURL}`\n      );\n\n      setContent(data.results)\n      setNumOfPages(data.total_pages)\n  };\n\nuseEffect(() => {\n  fetchTVSeries()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [page, genreforURL]);\n\n  return (\n    <div>\n        <span className='pageTitle'>TV Series</span>\n        <span className='filterText' style={{padding: 5}}>Filter by genre</span>\n        <Genres\n          type=\"tv\"\n          selectedGenres={seletedGenres}\n          setSelectedGenres={setSeletedGenres}\n          genres={genres}\n          setGenres={setGenres}\n          setPage={setPage}\n        />\n        <div className='trending'>\n          { content && content.map((c) => (\n            <SingleContent \n              key={c.id} \n              id={c.id} \n              poster={c.poster_path} \n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date} \n              media_type=\"tv\"\n              vote_average={c.vote_average}\n              />\n          ))}\n        </div>\n        {numOfPages > 1 &&(\n          <CustomPagination setPage={setPage} numOfPages={numOfPages} /> \n        )}\n    </div>\n  )\n}\n\nexport default TV_Series"]},"metadata":{},"sourceType":"module"}