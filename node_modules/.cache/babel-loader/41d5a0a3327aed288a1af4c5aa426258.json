{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areOptionsEqual = areOptionsEqual;\nexports.flattenOptionGroups = flattenOptionGroups;\nexports.getOptionsFromChildren = getOptionsFromChildren;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useSelect = require(\"./useSelect.types\");\n\nfunction areOptionsEqual(option1, option2) {\n  return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;\n}\n\nfunction getOptionsFromChildren(children) {\n  if (children == null) {\n    return [];\n  }\n\n  var selectChildren = [];\n\n  _react.default.Children.forEach(children, function (node) {\n    var _props, _props2, _element$props$disabl2;\n\n    var nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;\n\n    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {\n      if (nodeChildren != null) {\n        var _element$props$disabl;\n\n        var _element = node;\n        var group = {\n          options: getOptionsFromChildren(nodeChildren),\n          label: _element.props.label,\n          disabled: (_element$props$disabl = _element.props.disabled) != null ? _element$props$disabl : false\n        };\n        selectChildren.push(group);\n      }\n\n      return;\n    }\n\n    var element = node;\n    var option = {\n      value: element.props.value,\n      label: element.props.children,\n      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false\n    };\n    selectChildren.push(option);\n  });\n\n  return selectChildren != null ? selectChildren : [];\n}\n\nfunction flattenOptionGroups(groupedOptions) {\n  var isGroupDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var flatOptions = [];\n  groupedOptions.forEach(function (optionOrGroup) {\n    if ((0, _useSelect.isOptionGroup)(optionOrGroup)) {\n      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));\n    } else {\n      flatOptions.push((0, _extends2.default)({}, optionOrGroup, {\n        disabled: isGroupDisabled || optionOrGroup.disabled\n      }));\n    }\n  });\n  return flatOptions;\n}","map":null,"metadata":{},"sourceType":"script"}